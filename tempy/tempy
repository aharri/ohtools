#!/bin/sh
#
# $Id: tempy,v 1.7 2007/11/24 13:29:06 iku Exp $
#
# Copyright (c) 2007 Antti Harri <iku@openbsd.fi>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

INST_PREFIX=/usr/local

# Target aliases
default="templates"

# Check for configuration in current working directory,
# it will override settings defined in the file header
# section (the default parameter).

if [ -f ".tempy/conf" ]; then
	. ./.tempy/conf
else
	echo "Could not read config file .tempy/conf"
	exit 1
fi

# Code
load_plugin()
{
	echo "$PLUGINS_LOADED" | fgrep -q -w "$1"
	if [ "$?" -eq 0 ]; then
		return 0
	fi
	if [ ! -f "${INST_PREFIX}/share/tempy/tempy_${1}.sh" ]; then
		return 1
	fi
	. "${INST_PREFIX}/share/tempy/tempy_${1}.sh"
	PLUGINS_LOADED="$PLUGINS_LOADED $1"
	return 0
}

templates()
{
#	XXX
#	local f list temp update_all
#	local f NAME DESC
	local subdir

	TMPFILE_all=$(mktemp) || exit 1
	TMPFILE_old=$(mktemp) || exit 1
	TMPFILE_var1=$(mktemp) || exit 1

	IFS='	'
	printf "$TPLS" | while read -r f NAME DESC; do
		# XXX: currently supports only one sub level
		case $f in
#			index)    THIS=./ ;;
			*/)       subdir=${f}   ; continue ;;
			..)       subdir=''     ; continue ;;
#			*)        file=$1 ;;
		esac
		f=${subdir}${f}
#		echo "f=$f subdir=$subdir whole file=$subdir$f"
#		continue
		if [ -n "$PERMS_SOURCE" ]; then
			chmod "$PERMS_SOURCE" "$f"
		fi
		printf '%s\n' "$f" >> "$TMPFILE_all"
		if [ -z "$update_all" ]; then
			if [ "${f}.html" -ot "$f" ]; then
				printf '%s\n' "$f" >> "$TMPFILE_old"
			fi
			if [ "$MASTER" -nt "${f}.html" ] || [ ".tempy/conf" -nt "${f}.html" ]; then
				printf "1" > "$TMPFILE_var1"
				update_all=1
			fi
		fi
	done
	unset IFS

	if [ "$(cat $TMPFILE_var1)" -eq 1 ]; then
		list=$(cat "$TMPFILE_all")
	else
		list=$(cat "$TMPFILE_old")
	fi
	rm -f "$TMPFILE_all" "$TMPFILE_old" "$TMPFILE_var1"

	for f in $list; do
		echo "Updating ${f}.html"
		TMPFILE=$(mktemp) || exit 1
		IFS=
		cat "$MASTER" | while read -r temp; do
			case $temp in
				@navi@)     load_plugin navi && navi "$f" ;;
				@content@)
					IFS=
					cat "$f" | while read -r temp; do
						case $temp in
							@gallery@)  load_plugin gallery && gallery "$f" ;;
							*)          printf '%s\n' "$temp" ;;
						esac
					done
					unset IFS
					;;
				*)          printf '%s\n' "$temp" ;;
			esac
		done > "$TMPFILE"
		unset IFS
		# Atomically move the new file in place, so
		# no one sees an incomplete file.
		if [ -n "$PERMS_DEST" ]; then
			chmod "$PERMS_DEST" "$TMPFILE"
		fi
		mv -f "$TMPFILE" "$f.html"
	done
}

if [ -n "$1" ]; then
	unset default
fi

# Targets
# FIXME: other than 'templates' not working currently
for target in "$@" $default; do 
	echo "Building target: $target"
	case "$target" in
		'templates' ) templates ; break ;;
		'gallery'   ) gallery ; break ;;
	esac
done
