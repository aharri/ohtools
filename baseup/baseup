#!/bin/sh
#
# Copyright (c) 2007,2011 Antti Harri <iku@openbsd.fi>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

set -eu

VERBOSE=1
BASE=$(cd -- "$(dirname -- "$0")"; pwd)
CONFIG="${BASE}/.config"
KCONFIG="${BASE}/.kconfig"
FUNCS="$BASE/functions.sh"
INSTALL_SUB="$BASE/openbsd-install.sub"
TEMPS="$BASE/tmp"
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

# pick up functions
. "$FUNCS"
. "$INSTALL_SUB"

action=
for param; do
	case "$param" in
	'-c') check_priv && run_cronjob; exit 0;;
	'-h') usage;;
	'-l') list_snaps; exit 1;;
	'-r') action=revert;;
	'-t') check_priv && trim_snaps --verbose 1; exit;;
	*) usage;;
	--) break;;
	esac
done
unset param

# Everything else than usage and list_snaps needs root.
check_priv

touch "$CONFIG"

# check for first run
get_config state 1>/dev/null || set_config state install_kernel
if [ -z "$action" ]; then
	action=$(get_config state)
fi
	
# Set up temp directories if they don't exist.
setup_tempdirs

case "$action" in
revert)
	snaps=$(get_snaps)
	if [ -z "$snaps" ]; then
		errx "Cannot revert, no snapshots found."
	fi
	echo 'Found the following snaps:\n'
	count=1
	for i in $snaps; do
		printf '[%s] %s\n' "$count" "$i"
		count=$((count + 1))
	done
	# Second newest entry.
	default=$(printf '%s\n' "$snaps" | head -n 2 | tail -n 1)
	while :; do
		openbsd_ask_until "Which one?" "$default"
		case "$resp" in
		'done') errx "No snapshot selected.";;
		"?") 
			count=1
			for i in $snaps; do
				printf '[%s] %s\n' "$count" "$i"
				count=$((count + 1))
			done
		;;
		[0-9]|[0-9][0-9])
			set -- $(printf '%s\n' "$snaps" | sed -n "${resp}p")
			[[ $# -lt 1 ]] && { echo "There is no line $resp." ; continue ; }
			revert=$1
			break
		;;
		20[1-9][0-9]-[0-1][0-9]-[0-3][0-9]-[0-9][0-9])
			revert=$resp
			break
		;;
		*)
			echo "'$resp' is not a valid timestamp."
		;;
		esac
	done
	echo "Reverting to '$revert'."
	install_kernel "$revert"
	install_tgz --sysmerge=auto "$revert"
;;
install_kernel)
	# Trim old snaps, leave 3.
	trim_snaps 3

	# SOURCE
	_VAL=$(get_config source || :)
	if [ "$?" -ne 0 ] || [ -z "$_VAL" ]; then
		init_source
	else
		source=$_VAL
	fi

	# FILE FETCHING
	# always needed files
	echo "Fetch source $source."
	echo "Fetching SHA256 sums and index."
	fetch_files --nocomp SHA256 SHA256.sig index.txt

	echo "Fetching new boot files and kernels."
	fetch_files bsd.rd bsd
	echo "Fetching SMP kernel, it may not exist for `uname -m`."
	fetch_files --nocheck bsd.mp

	# fetch only selected files
	echo "Fetching base packages."
	PKGS="base etc comp game man xbase xetc xfont xserv xshare"

	for pkg in $PKGS; do
		_VAL=$(get_config "$pkg" || :)
		ret=$?
		if [ "$ret" -ne 0 ] || ( [ "$ret" -eq 0 ] && [ "$_VAL" != "yes" ] && [ "$_VAL" != "no" ] ); then
			if yesno "Do you wish to add \"$pkg\" to the list of packages to be installed?"; then
				ans=yes
			else
				ans=no
			fi
			set_config $pkg $ans
		else
			ans=$_VAL
		fi

		# Fetch it
		if [ "$ans" != "no" ]; then
			query_index $pkg
			fetch_files $_VAL
		fi
	done

	# now install kernels
	yesno "About to install kernels, are you sure?"

	curver=$(get_version /bsd)
	install_kernel "${SNAPDIR}"
	newver=$(get_version /bsd)
	configure_kernels || :

	if [ "$curver" != "$newver" ]; then
		printf '%s\n' "Your OpenBSD version has changed ($curver -> $newver)."
		yesno "Would you like to schedule sending of dmesg to OpenBSD?" && \
			add_cronjob
	fi
	unset curver
	unset newver

	echo ""
	echo "Next launch will extract base packages. You can"
	echo "reboot before that, but it is not always needed."
	echo ""
	set_config state install_base
;;
install_base)
	# install the base packages
	yesno "About to install base packages, are you sure?"
	install_tgz --sysmerge=ask
;;
*) errx "Unknown configuration state '$action'."; break ;;
esac

