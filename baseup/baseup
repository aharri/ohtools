#!/bin/sh
#
# $Id: baseup,v 1.23 2008/02/19 18:41:35 iku Exp $
#
# Copyright (c) 2007 Antti Harri <iku@openbsd.fi>
#

VERBOSE=1
CURL_OPTS="-s -4"
BASE=$(cd -- "$(dirname -- "$0")"; pwd)
CONFIG="${BASE}/.config"
FUNCS="$BASE/functions.sh"
TEMPS="$BASE/tmp"
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

args=$(getopt h $*)
set -- $args
while [ $# -ge 0 ]; do
	case "$1"
	in
		'-h') usage ; shift;;
		'-?') usage ; shift;;
		--) shift; break;;
	esac
done

# pick up functions
. "$FUNCS"

# check for first run
get_config state || set_config state install_kernel

# set up temp directory if it doesn't exist
if [ ! -d "$TEMPS" ]; then
	# just mkdir it, we don't have anything secrets to store
	mkdir -p "$TEMPS" 
fi

# main
get_config state
case "$_VAL" in
	"install_kernel" ) # in the middle of fetching files
		# Clean from previous run.
		echo -n "Wipe out files from previous run? [Y/n] "
		read ans
		if [ "$ans" = "y" ] || [ -z "$ans" ]; then
			rm -f "${TEMPS}/"*.tgz "${TEMPS}/"bsd* "${TEMPS}/"*boot*
		fi

		# SOURCE
		get_config source
		if [ "$?" -ne "0" ] || [ "$_VAL" = "" ]; then
			init_source
		else
			source=$_VAL
		fi

		# FILE FETCHING
		# always needed files
		echo "Getting file sizes (for x*.tgz)"
		fetch_listing "${TEMPS}/dirlisting.txt"

		echo "Fetch source $source."
		echo "Fetching MD5 sums and index."
		fetch_files --nocomp MD5 index.txt

		echo "Fetching new base images."
		fetch_files bsd.rd bsd
		echo "Fetching architecture dependent files. Some may fail."
		echo "Boot files will not be installed, update manually."
		fetch_files --nocheck bsd.mp boot ofwboot

		# fetch only selected files
		echo "Fetching base packages."
		PKGS="base etc comp game man misc xbase xetc xfont xserv xshare"

		for pkg in $PKGS; do
			get_config $pkg
			if [ "$?" -ne "0" ]; then
				echo -n "Install $pkg ? (y/N) "
				read ans
				set_config $pkg "$ans"
				if [ "$?" -ne "0" ]; then
					echo "Failed to set configuration."
					exit 1
				fi
			else
				ans=$_VAL
			fi

			# Fetch it
			if [ "$ans" = "y" ]; then
				query_index $pkg
				fetch_files $_VAL
			fi
		done

		# now install kernels
		echo -n "About to install kernels, are you sure? (y/N) "
		read ans
		if [ "$ans" != "y" ] || [ $(id -u "$USER") -ne 0 ]; then
			echo "User requested abort or user not root!"
			exit 1
		fi

		cp -f /bsd /bsd.orig
		cp -f "${TEMPS}/"bsd* /

		echo "Kernel(s) installed"

		echo "New config state written, reboot and re-run this script after reboot"
		set_config state install_base
	;;
	"install_base" )
		# install the base packages
		echo -n "About to install base packages, are you sure? (y/N) "
		read ans
		if [ "$ans" != "y" ] || [ $(id -u "$USER") -ne 0 ]; then
			echo "User requested abort or user not root!"
			exit 1
		fi

		for pkg in "${TEMPS}/"*.tgz; do
			echo "$pkg" | egrep -q "/etc..\.tgz$"
			if [ "$?" -eq 0 ]; then
				echo "Skipping ${pkg}: merge by hand!"
				continue
			fi
			echo "Installing $pkg"
			(cd / && tar zxfp "$pkg") || break
		done

		echo "Creating devices."
		# FIXME error checking
		(cd /dev && ./MAKEDEV all)

		echo "Base installed, you might want to reboot now."
		echo "Also remember to merge /etc by hand!"

		echo -n "Run mtree? (recommended) (Y/n) "
		read ans
		if [ "$ans" != "n" ]; then
			mtree -def /etc/mtree/4.4BSD.dist -p / -u
		fi

		set_config state install_kernel
	;;
esac
